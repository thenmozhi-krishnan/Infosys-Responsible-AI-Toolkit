LOGCHECK="${log}" #[OPTIONAL] #For Health Check used to store logs.Set it as True or False

PORT="${ports}" #[MANDATORY] 

#This vault variables are optional.If you want to use the vault insead of DB then you can intilise these variables
VAULTNAME="${vault}" #[OPTIONAL]
ISVAULT="${isvault}" #[OPTIONAL]
AZURE_VAULT_TENANT_ID="${azurevaulttenantid}" #[OPTIONAL]
AZURE_VAULT_CLIENT_ID="${azurevaultclientid}" #[OPTIONAL]
VAULT_SECRET="${VAULT_SECRET}" #[OPTIONAL]
KEYVAULTURL="${KEYVAULTURL}" #[OPTIONAL]
APP_VAULT_BACKEND="${APP_VAULT_BACKEND}" #[OPTIONAL]
APP_VAULT_ROLE_ID="${APP_VAULT_ROLE_ID}" #[OPTIONAL]
APP_VAULT_SECRET_ID="${APP_VAULT_SECRET_ID}" #[OPTIONAL]
APP_VAULT_PATH="${APP_VAULT_PATH}" #[OPTIONAL]
APP_VAULT_URL="${APP_VAULT_URL}" #[OPTIONAL]
APP_VAULT_KEY_MONGOUSER="${APP_VAULT_KEY_MONGOUSER}" #[OPTIONAL]
APP_VAULT_KEY_MONGOPASS="${APP_VAULT_KEY_MONGOPASS}" #[OPTIONAL]

#Intiliaze this variables if you want to establish the DB connection.

DBTYPE="${dbtype}" #[OPTIONAL] It will be mandatory if you will be using DB(values supported are mongo, psql , cosmos)
APP_MONGO_DBNAME="${APP_MONGO_DBNAME}" #[OPTIONAL] If you are using DB then this will be mandatory and mention the dbname

#If you are giving the DB type as psql or mongo then you need to define the username. password and mongohost
DB_USERNAME="${username}" #[OPTIONAL] 
DB_PWD="${password}" #[OPTIONAL]
APP_MONGO_HOST="${APP_MONGO_HOST}" #[OPTIONAL] 

# If you are using Cosmos DB then you need to define the cosmos path
COSMOS_PATH="${cosmos_path}" #[OPTIONAL] 

# If you are using Mongo DB then you need to define the mongo path
MONGO_PATH="mongodb://${DB_USERNAME}:${DB_PWD}@${APP_MONGO_HOST}/" #[OPTIONAL]

# Set it as True if you want to pass the data to Telemetry or else False
TEL_FLAG="${tel_flag}" #[MANDATORY]

#If you have set TEL_FLAG as True
TELEMETRY_ENVIRONMENT="${telemetryenviron}"#[OPTIONAL] Set it as 'azure' 
TELEMETRY_PATH="${telemetrypath}"#[OPTIONAL] Give the decoupled telemetry path
COUPLEDTELEMETRYPATH="${coupledtelemetrypath}" #[OPTIONAL] Give the coupled telemetry path
EVALLLMTELEMETRYPATH="${evalllmtelemetrypath}" #[OPTIONAL] Give the eval llm telemetry path
ADMINTEMPLATEPATH="${adminTemplatepath}" #[OPTIONAL] Give the admin template path



BLOOM_ENDPOINT="${bloomendpoint}" #[optional]
LLAMA_ENDPOINT="${llamaendpoint}" #[optional]

# MODEL_NAME = "${modelname}" #[optional]
# OPENAI_API_TYPE = "${apitype}" #[optional]

#If you are using Llama3-70b model then you need to define the values
LLAMA_ENDPOINT3_70b="${llamaendpoint3_70b}" #[OPTIONAL]
AICLOUD_MODEL_AUTH="${aicloud_model_auth}" #[optional]

# If you are using gpt3 model then you need to define the values
OPENAI_API_BASE_GPT3 = "${apibase_gpt3}"#[OPTIONAL] 
OPENAI_API_KEY_GPT3 = "${apikey_gpt3}" #[OPTIONAL] 
OPENAI_API_VERSION_GPT3 = "${apiversion_gpt3}"  #[OPTIONAL]               
OPENAI_MODEL_GPT3 = "${openaimodel_gpt3}" #[OPTIONAL] 

# If you are using gpt4 model then you need to define the values
OPENAI_API_BASE_GPT4 = "${apibase_gpt4}" #[OPTIONAL] 
OPENAI_API_KEY_GPT4 = "${apikey_gpt4}" #[OPTIONAL] 
OPENAI_API_VERSION_GPT4 = "${apiversion_gpt4}"  #[OPTIONAL] 
OPENAI_MODEL_GPT4 = "${openaimodel_gpt4}" #[OPTIONAL] 

# If you are using gpt4o model then you need to define the values
OPENAI_API_BASE_GPT4_O = "${api_base}" #[OPTIONAL] 
OPENAI_API_KEY_GPT4_O = "${api_key}" #[OPTIONAL] 
OPENAI_API_VERSION_GPT4_O = "${api_version}" #[OPTIONAL] 
OPENAI_MODEL_GPT4_O = "${model}" #[OPTIONAL] 

# If you are using AWS Bedrock then you need to define the values
AWS_SERVICE_NAME = "${awsservicename}" #[OPTIONAL] 
AWS_KEY_ADMIN_PATH = "${awsadminpath}" #[OPTIONAL]
AWS_MODEL_ID="${awsmodelid}" #[OPTIONAL]
ACCEPT="${accept}" #[OPTIONAL]
CONTENTTYPE="${contentType}" #[OPTIONAL]
REGION_NAME="${region_name}" #[OPTIONAL]
ANTHROPIC_VERSION="${anthropicversion}" #[OPTIONAL]

#If you are using gemini-2.5 pro model then you need to define the values 
GEMINI_PRO_MODEL_NAME="{gemini_pro_model_name}" #[OPTIONAL] 
GEMINI_PRO_API_KEY="{gemini_pro_api_key}" #[OPTIONAL]                                                                                                           

#If you are using gemini-2.5 flash model then you need to define the values 
GEMINI_FLASH_MODEL_NAME="{gemini_flash_model_name}"  #[OPTIONAL] 
GEMINI_FLASH_API_KEY="{gemini_flash_api_key}" #[OPTIONAL] 


#Define the endpoints from the local steup of the moderation models
PRIVACY="${privacy}" #[MANDATORY] #Define the privacy model endpoint
SIMILARITYMODEL="${similaritymodel}" #[MANDATORY] Define the similarity model endpoint
RESTRICTEDMODEL="${restrictedmodel}" #[MANDATORY] Define the restricted topic model endpoint
DETOXIFYMODEL="${detoxifymodel}" #[MANDATORY] Define the detoxify model endpoint
PROMPTINJECTIONMODEL="${promptinjectionmodel}" #[MANDATORY] Define the prompt injection model endpoint
JAILBREAKMODEL="${jailbreakmodel}" #[MANDATORY] Define the jailbreak model endpoint
SENTIMENT="${sentiment}" #[MANDATORY] Define the sentiment model endpoint
INVISIBLETEXT="${invisibletext}" #[MANDATORY] Define the invisible text model endpoint
GIBBERISH="${gibberish}" #[MANDATORY] Define the gibberish model endpoint
BANCODE="${bancode}" #[MANDATORY] Define the bancode model endpoint


TARGETENVIRONMENT="${environmentname}"#[MANDATORY] Set the environment name as 'azure'


#If you want to use 'azure' for translation then you need to define the values
AZURE_TRANSLATE_KEY = "${azuretranslatekey}" #[OPTIONAL] Define the translate key
AZURE_TRANSLATE_ENDPOINT = "${azuretranslateendpoint}" #[OPTIONAL] Define the translate endpoint 
AZURE_TRANSLATE_REGION = "${azuretranslateregion}" #[OPTIONAL] Define the azure translate region


#This is required to generate Bearer Token(for OAuth2), which is optional.
TENANT_ID = "${tenant_id}" #[OPTIONAL]
CLIENT_ID = "${client_id}" #[OPTIONAL]
CLIENT_SECRET = "${client_secret}" #[OPTIONAL]
AUTH_URL = "${auth_url}" #[OPTIONAL]

#This will be required only if we are using Microsoft or Google's support for token generation.
SCOPE = "${scope}" #[OPTIONAL] Set the scope for Service Providers

CACHE_TTL="${cache_ttl}"#[MANDATORY] Time for which entries will be stored in cache, mention in seconds
CACHE_SIZE="${cache_size}" #[MANDATORY] Total entries in cache
CACHE_FLAG="${cache_flag}" #[MANDATORY] Cache enablement flag , set it to True if caching to be applied,otherwise False

## FOR EXE JUST SET TO FALSE DONT CHANGE!!
# EXE_CREATION = "False"
EXE_CREATION = "${exe_creation}" #[OPTIONAL]
SHOW_PROMPTS="${show_prompts}"  #[MANDATORY] Number of prompts to be recommended for each check in the response, set it to any number of your choice 


#If you want to by pass verify SSL check then set the variable value to False otherwise True
VERIFY_SSL= "${verify_ssl}" #[OPTIONAL] 