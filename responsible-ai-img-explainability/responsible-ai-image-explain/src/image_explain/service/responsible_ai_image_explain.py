'''
Copyright 2024-2025 Infosys Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies 
or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

import json
from image_explain.utils.model.azure import Azure, Gemini
from image_explain.utils.model.ollama import Ollama
from image_explain.utils.prompts.base import Prompt
from image_explain.config.logger import request_id_var, CustomLogger
import openai

log=CustomLogger()

class ImageExplain:
    
    def prompt_based_analysis(mime_type: str, image: str, prompt:str, evaluator: str) -> dict:
        """
        Perform prompt-based analysis on the provided image.

        This method uses a prompt to generate an analysis of the image. It validates the input parameters
        and then calls an external service to perform the analysis.

        Parameters:
        mime_type (str): The MIME type of the image (e.g., 'image/jpeg', 'image/png').
        image (str): The base64-encoded string representation of the image.
        prompt (str): The prompt to use for the analysis.
        evaluator (str): The evaluator to use for the analysis (e.g., 'gpt', 'davinci').

        Returns:
        dict: The explanation generated by the Azure service based on the provided prompt and image.
        """
        # Validate the parameters
        if not mime_type or not image:
            raise ValueError("Mime_type, and image are mandatory fields")

        try:
            if "gpt" in evaluator.lower():
                # Generate the explanation using the Azure service
                explanation = Azure().generate(
                    model_name=evaluator,
                    prompt=Prompt.image_analyze_prompt(),
                    mime_type=mime_type,
                    generated_image_base64=image
                )
            else:
                explanation = Gemini().generate(
                    model_name=evaluator,
                    prompt=Prompt.image_analyze_prompt(),
                    mime_type=mime_type,
                    generated_image_base64=image
                )
            # Parse the JSON response
            response = json.loads(explanation)
        except json.JSONDecodeError as json_err:
            log.error(f"UUID: {request_id_var.get()}, JSON decoding error: {json_err}", exc_info=True)
            raise RuntimeError(f"Error decoding JSON response: {json_err}")

        except ValueError as val_err:
            log.error(f"UUID: {request_id_var.get()}, Value error: {val_err}", exc_info=True)
            raise RuntimeError(f"Value error: {val_err}")

        except Exception as e:
            log.error(f"UUID: {request_id_var.get()}, Unexpected error: {e}", exc_info=True)
            raise RuntimeError(f"An unexpected error occurred: {e}")
        
        return response
    
    def image_based_bias_analysis(image: str, evaluator: str, mime_type: str = None) -> dict:
        """
        Perform bias analysis on the provided image.

        This method uses a predefined prompt to generate an analysis of the image. It validates the input parameters
        and then calls an external service to perform the analysis.

        Parameters:
        mime_type (str): The MIME type of the image (e.g., 'image/jpeg', 'image/png').
        image (str): The base64-encoded string representation of the image.
        evaluator (str): The evaluator to use for the analysis (e.g., 'gpt', 'davinci').

        Returns:
        dict: The explanation generated by the Azure service based on the provided image.
        """
        # Validate the parameters
        if not mime_type or not image:
            raise ValueError("Mime_type, and image are mandatory fields")

        try:
            if "gpt" in evaluator.lower():
            # Generate the explanation using the Azure service
                explanation = Azure().generate(
                    model_name=evaluator,
                    prompt=Prompt.analyze_bias_without_prompt(),
                    mime_type=mime_type,
                    generated_image_base64=image
                )
            else:
                explanation = Gemini().generate(
                    model_name=evaluator,
                    prompt=Prompt.analyze_bias_without_prompt(),
                    mime_type=mime_type,
                    generated_image_base64=image
                )
            
            
            # Parse the JSON response
            response = json.loads(explanation)
        except json.JSONDecodeError as json_err:
            log.error(f"UUID: {request_id_var.get()}, JSON decoding error: {json_err}", exc_info=True)
            raise RuntimeError(f"Error decoding JSON response: {json_err}")

        except ValueError as val_err:
            log.error(f"UUID: {request_id_var.get()}, Value error: {val_err}", exc_info=True)
            raise RuntimeError(f"Value error: {val_err}")

        except Exception as e:
            log.error(f"UUID: {request_id_var.get()}, Unexpected error: {e}", exc_info=True)
            raise RuntimeError(f"An unexpected error occurred: {e}")
        
        return response
    
    def query_based_image_analysis(image_base64: str, mime_type: str, prompt: str, evaluator: str) -> dict:
        """
        Perform query-based analysis on the provided image.
        
        This method uses a prompt to generate a response for the given image. It validates the input parameters   
        and then calls an external service to perform the analysis.
        
        Parameters:
        image_base64 (str): The base64-encoded string representation of the image..
        mime_type (str): The MIME type of the image (e.g., 'image/jpeg', 'image/png').
        prompt (str): The prompt to use for the analysis.
        evaluator (str): The evaluator to use for the analysis (e.g., 'gpt', 'davinci').
        
        Returns:
        dict: The explanation generated by the Azure service based on the provided prompt and image.
        """
        # Validate the parameters
        if not mime_type or not image_base64 or not prompt:
            raise ValueError("Mime_type, image_base64, and prompt are mandatory fields")
        
        try:
            if "gpt" in evaluator.lower():
                # Generate the explanation using the Azure service
                explanation = Azure().generate(
                    model_name=evaluator,
                    prompt=Prompt.query_based_image_analysis_prompt(prompt),
                    mime_type=mime_type,
                    generated_image_base64=image_base64
                )
            else:
                explanation = Gemini().generate(
                    model_name=evaluator,
                    prompt=Prompt.query_based_image_analysis_prompt(prompt),
                    mime_type=mime_type,
                    generated_image_base64=image_base64
                )
                
            # Parse the JSON response
            response = json.loads(explanation)
        except json.JSONDecodeError as json_err:
            log.error(f"UUID: {request_id_var.get()}, JSON decoding error: {json_err}", exc_info=True)
            raise RuntimeError(f"Error decoding JSON response: {json_err}")

        except ValueError as val_err:
            log.error(f"UUID: {request_id_var.get()}, Value error: {val_err}", exc_info=True)
            raise RuntimeError(f"Value error: {val_err}")

        except Exception as e:
            log.error(f"UUID: {request_id_var.get()}, Unexpected error: {e}", exc_info=True)
            raise RuntimeError(f"An unexpected error occurred: {e}")
        
        return response
    
    def analyze_image(image: str, prompt:str, evaluator: str, mime_type: str = None):

        """
        Perform analysis on the provided image.

        This method uses a prompt to generate an analysis of the image. It validates the input parameters
        and then calls an external service to perform the analysis.

        Parameters:
        mime_type (str): The MIME type of the image (e.g., 'image/jpeg', 'image/png').
        image (str): The base64-encoded string representation of the image.
        prompt (str): The prompt to use for the analysis.
        evaluator (str): The evaluator to use for the analysis (e.g., 'gpt').

        Returns:
        dict: The explanation generated by the Azure service based on the provided prompt and image.
        """
        try:
            if 'gpt'in evaluator.lower():
                # Generate the explanation using the Azure service
                explanation = Azure().generate(
                    model_name=evaluator,
                    prompt=prompt,
                    mime_type=mime_type,
                    generated_image_base64=image
                )
                # Parse the JSON response
                response = json.loads(explanation)
            elif 'gemini' in evaluator.lower():
                # Generate the explanation using the Gemini service
                explanation = Gemini().generate(
                    model_name=evaluator,
                    prompt=prompt,
                    mime_type=mime_type,
                    generated_image_base64=image
                )
                # Parse the JSON response
                response = json.loads(explanation)
            elif 'llama' in evaluator.lower():
                # Generate explanation using the Ollama service
                explanation = Ollama.generate(
                    model_name=evaluator,
                    prompt=prompt,
                    image_url=image
                )
                response = explanation
        except json.JSONDecodeError as json_err:
            log.error(f"UUID: {request_id_var.get()}, JSON decoding error: {json_err}", exc_info=True)
            raise RuntimeError(f"Error decoding JSON response: {json_err}")

        except ValueError as val_err:
            log.error(f"UUID: {request_id_var.get()}, Value error: {val_err}", exc_info=True)
            raise RuntimeError(f"Value error: {val_err}")

        except openai.BadRequestError as bad_req_err:
            # log.error(f"UUID: {request_id_var.get()}, Bad request error: {bad_req_err}", exc_info=True)
            raise RuntimeError("Azure Responsible AI Content Policy Error")
        except Exception as e:
            log.error(f"Unexpected error: {e}", exc_info=True)
            raise RuntimeError(f"An unexpected error occurred: {e}")
        
        return response
    

    def uncertainity_score(mime_type: str, image: str, prompt:str, evaluator: str) -> dict:
        """
        Perform prompt-based analysis on the provided image.

        This method uses a prompt to generate an analysis of the image. It validates the input parameters
        and then calls an external service to perform the analysis.

        Parameters:
        mime_type (str): The MIME type of the image (e.g., 'image/jpeg', 'image/png').
        image (str): The base64-encoded string representation of the image.
        prompt (str): The prompt to use for the analysis.
        evaluator (str): The evaluator to use for the analysis (e.g., 'gpt', 'davinci').

        Returns:
        dict: The explanation generated by the Azure service based on the provided prompt and image.
        """
        # Validate the parameters
        if not mime_type or not image:
            raise ValueError("Mime_type, and image are mandatory fields")

        try:
            if "GPT_4o" in evaluator:
                # Generate the explanation using the Azure service
                explanation = Azure().generate(
                    model_name=evaluator,
                    prompt=prompt,
                    mime_type=mime_type,
                    generated_image_base64=image
                )
            else:
                explanation = Gemini().generate(
                    model_name=evaluator,
                    prompt=prompt,
                    mime_type=mime_type,
                    generated_image_base64=image
                )

            # Parse the JSON response
            response = json.loads(explanation)
        except json.JSONDecodeError as json_err:
            log.error(f"UUID: {request_id_var.get()}, JSON decoding error: {json_err}", exc_info=True)
            raise RuntimeError(f"Error decoding JSON response: {json_err}")

        except ValueError as val_err:
            log.error(f"UUID: {request_id_var.get()}, Value error: {val_err}", exc_info=True)
            raise RuntimeError(f"Value error: {val_err}")

        except Exception as e:
            log.error(f"UUID: {request_id_var.get()}, Unexpected error: {e}", exc_info=True)
            raise RuntimeError(f"An unexpected error occurred: {e}")
        
        return response